import sys, traceback, os, random, math, json, copy, time

from Hacjpg import Hacjpg, HacTrafficSignDetection

def bt():
    try:   
        raise Exception("Manually raise an exception.")
    except Exception:
        traceback.print_stack(file=sys.stderr)
        sys.stderr.flush()
        
def msg(*argv):
    sys.stdout.write("".join(list(argv)) + "\n")
    sys.stdout.flush()

def errmsg(*argv):
    sys.stderr.write(" *** ERROR: ")
    sys.stderr.write("".join(list(argv)) + "\n")
    sys.stderr.flush()
    bt()
    
def vbsmsg(*argv):
    sys.stdout.write("...")
    sys.stdout.write("".join(list(argv)) + "\n")
    sys.stdout.flush()

class HacDriverII(Hacjpg):
    """
    This is the main class to drive the car. See try2drive method.
    """
    
    def __init__(self, is_debug=False):
        self.is_debug = is_debug
        
        self.hacjpg = Hacjpg()
        
        #
        # traffic sign
        #
        self.hactsd = HacTrafficSignDetection()
        self.traffic_sign = {}
        self._init_traffic_sign()
        
        #
        # Constant Car configurations
        #
        self.spec = {
            # Throttle -1.0 ~ 1.0. brk 1.0 means throttle -1.0
            'tho_max': 0.5,
            'tho_min': 0.0,
            'tho_unit': 0.001,
            'brk_max': 0.6,
            'brk_min': 0.0,
            'brk_unit': 0.01,
            # Steering angle -40 ~ 40 degree
            'sta_max': 40,
            'sta_min': -40,
            # history
            'history_max': 10,
            # speed error tolerance
            'speed_max': 0.95,
            'speed_min': 0.60,
            'speed_uturn': 0.60,
            'speed_turn': 0.65,
            'speed_update_unit': 0.015,
            'speed_back_limit': -1.0,
            }
        msg("Car spec: " + format(self.spec))
        
        #
        # Save dashboard history
        # 
        self.history = []
        
        #
        # Dynamic data/configuration
        #
        self.dyn = {
            # reindeer result
            'ri_angle': None,
            'ri_cpoint': None,
            'ri_cpoint_angle': None,
            'ri_cpoint_distance': 0,
            'ri_area_percent': 0,
            'ri_area_percent_all': None,
            'ri_img': None,
            # If I have choice, take right-hand road?
            'road_prefer_left': True,
            'road_prefer_rgb': [(0, 0, 255), (255, 0, 0), (0, 255, 0)],
            'road_fixing': False,
            'road_obstacle': False,
            'tho_manual_ctrl': 0.0,
            'sta_manual_ctrl': 0.0,
            # Collision recover
            # Expected speed
            'speed': self.spec['speed_min'],
            'speed_inc_cnt': 0,
            }
        
    def _init_traffic_sign(self):
        self.traffic_sign = {}
        
        # <=X
        data = {'name': 'blocked-go-left', 'base64': ''}
        data['action'] = 'left'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
         
        # X=>
        data = {'name': 'blocked-go-right', 'base64': ''}
        data['action'] = 'right'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # <== 
        data = {'name': 'turn-left', 'base64': ''}
        data['action'] = 'none'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # ==>
        data = {'name': 'turn-right', 'base64': ''}
        data['action'] = 'none'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # O ^
        # O |
        data = {'name': 'split-go-right', 'base64': ''}
        data['action'] = 'right'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # ^ O
        # | O
        data = {'name': 'split-go-left', 'base64': ''}
        data['action'] = 'left'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # |---|
        # V   |
        data = {'name': 'uturn-left', 'base64': ''}
        data['action'] = 'none'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
        # +---|
        # |   V
        data = {'name': 'uturn-right', 'base64': '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'}
        data['action'] = 'none'
        self.traffic_sign[data['name']] = data
        self.hactsd.add_traffic_sign_by_base64(data['base64'], name=data['name'])
        
    def history_create_data(self, dashboard):
        """
        Allocate a new history data by current dashboard
        """
        data = {}
        
        data['sta'] = float(dashboard['steering_angle'])
        data['tho'] = float(dashboard['throttle'])
        data['brk'] = float(dashboard['brakes'])
        
        data['time'] = float(dashboard['time'])
        data['speed'] = float(dashboard['speed'])
        
        return data
        
    def history_update(self, dashboard):
        """
        history = [ new, older, ..., very old ]
        """
        nd = self.history_create_data(dashboard)
        
        history = self.history
        if len(history) < self.spec['history_max']:
            history.insert(0, nd)
        else:
            history.pop()
            history.insert(0, nd)
            
    def history_get(self, idx=0):
        history_max = len(self.history)
        
        if idx >= history_max:
            return None
        else:
            return self.history[idx]
        
    def history_get_brake(self, idx=0):
        h = self.history_get(idx)
        
        return h['brk']
        
    def history_save_position(self, position='none'):
        latest_hist = self.history_get(0)
        latest_hist['position'] = position
        
    def history_get_latest_position(self):
        for h in self.history:
            if h['position'] != 'none':
                return h['position']
            
        return 'none'
    
    def history_get_sta_avg(self, num):
        """
        Get average of history sta
        """
        cnt = 0.0
        sum = 0.0
        for h in self.history:
            sum = h['sta']
            cnt += 1.0
            
            if cnt >= num:
                break
            
        return round(sum / cnt, 4)
    
    def history_get_sta_concussion_rate(self, backlog=4):
        """
        Get the sta concussion rate
        """
        
        cnt = 0
        max = len(self.history)
        
        if max <= 1:
            # Need at least 2 history to calculate concussion
            return 0
        
        progress = 0
        prev_sta = 0
        for h in self.history:
            if prev_sta == 0:
                prev_sta = 1 if h['sta'] > 0 else -1
                continue
            
            if prev_sta * h['sta'] < 0:
                prev_sta = 1 if h['sta'] > 0 else -1
                cnt += 1
                
            progress += 1
            if progress >= backlog:
                break
        
        return cnt / float(max)
    
    def history_get_speed(self):
        history = self.history_get(0)
        if history == None:
            return 0.0
        else:
            return history['speed']
        
    def calc_percentage(self, v, base):
        if base == 0:
            errmsg("Invalid input argument")
            return 0
            
        return round(v / float(base), 4) * 100

    def set_speed(self, speed):
#         vbsmsg("Set speed: " + str(speed))
        self.dyn['speed'] = speed
        
        self.dyn['speed_inc_cnt'] = 0
    
    def set_speed_if_negative(self, speed):
        if speed < 0:
            errmsg("Invalid speed" + str(speed))
        
        if self.dyn['speed'] < 0:
            self.dyn['speed'] = speed
            
        self.dyn['speed_inc_cnt'] = 0
            
    def set_speed_if_postive(self, speed):
        if speed > 0:
            errmsg("Invalid speed" + str(speed))
            
        if self.dyn['speed'] > 0:
            self.dyn['speed'] = speed
            
        self.dyn['speed_inc_cnt'] = 0
        
    def update_speed_abs(self, increase=True):
        """
        THO + ABS (Anti-lock Braking System)
        """
        if increase == True:
            if self.dyn['speed_inc_cnt'] >= 4 or self.dyn['speed'] <= 0.4:
                self.dyn['speed_inc_cnt'] = 0
                speed = self.spec['speed_update_unit']
            else:
                speed = (self.spec['speed_update_unit'] / 2.0)
                
            return self.update_speed(speed)
        else:
            """
            Decrease speed but no slower than...
            """
            speed = (self.spec['speed_update_unit'] * 8.0) * (-1)
            return self.update_speed(speed)
            
    def update_speed(self, speed):
        if speed > 0:
            """
            Increase speed by input amount
            """
            self.dyn['speed'] += speed     
            self.dyn['speed_inc_cnt'] += 1
            
            if self.dyn['speed'] >= self.spec['speed_max']:
                self.dyn['speed'] = self.spec['speed_max']
                
#             vbsmsg("speed+: " + str(self.dyn['speed']))
        else:
            """
            Decrease speed but no slower than...
            """
            self.dyn['speed_inc_cnt'] = 0
            
            if (self.dyn['speed'] - abs(speed)) < self.spec['speed_min']:
                return False
            
            self.dyn['speed'] -= abs(speed) 
            
#             vbsmsg("speed-: " + str(self.dyn['speed']))
            
        self.dyn['speed'] = round(self.dyn['speed'], 4)
        return True
    
    def calibrate_sta(self, sta):
        """
        Make sure sta is in range. Return a reasonable value.
        """
        if sta < 0:
            if sta < self.spec['sta_min']:
                return self.spec['sta_min']
            else:
                return sta
        elif sta > 0:
            if sta > self.spec['sta_max']:
                return self.spec['sta_max']
            else:
                return sta
        
        return 0
    
    def calibrate_sta_sqrt(self, sta):
        """
        Use sqrt to calibrate sta
        
        >>> math.sqrt(90) = 9.486832980505138
        >>> math.sqrt(45) = 6.708203932499369
        >>> math.sqrt(30) = 5.477225575051661
        >>> math.sqrt(15) = 3.872983346207417
        >>> math.sqrt(1) = 1.0
        >>> math.sqrt(0.5) = 0.7071067811865476
        """
        output = 0.0
        
        if sta > 0:
            output = math.sqrt(sta)
        elif sta < 0:
            output = math.sqrt(abs(sta)) * (-1)
        
        return round(output, 4)
    
    def get_area_percent_by_color(self, area_percent, rgb):
        if area_percent == None:
            errmsg("Invalid input")
        
        if rgb == (255, 0, 0):
            return area_percent['red']
        elif rgb == (0, 255, 0):
            return area_percent['green']
        elif rgb == (0, 0, 255):
            return area_percent['blue']
        elif rgb == (0, 0, 0):
            return area_percent['black']
        
        errmsg("Invalid rgb input")
    
    def calc_expect_sta3(self, dashboard):
        """
           ROAD
              |
              V
        _____________________  
        |   .. /..           |
        |  .. /..            |
        | ...o.cpoint        |
        | ../..              |
        |________o___________
              zero point
        """
        
        zero_point = self.hacjpg.get_resolution(self.dyn['ri_img'])
        zero_point = (zero_point[0] / 2, zero_point[1])
        
        #        
        # Input
        #
        ri_cpoint_angle = self.dyn['ri_cpoint_angle']
        ri_area_percent = self.dyn['ri_area_percent']
        ri_cpoint = self.dyn['ri_cpoint']
        ri_cpoint_x, ri_cpoint_y = ri_cpoint
        ri_cpoint_distance = self.dyn['ri_cpoint_distance']
        speed = self.history_get_speed()
        concussion_rate = self.history_get_sta_concussion_rate(self.spec['history_max'])
        
        #
        # sta calibrate - cpoint angle (-90 ~ 90). The most effective information.
        # 
        out_sta = ri_cpoint_angle
        out_sta = self.calibrate_sta(out_sta)
        out_sta = self.calibrate_sta_sqrt(out_sta)

        #
        # sta calibrate - speed (TBD) 
        #
        
        #
        # sta calibrate - If concussion rate is large. Decrease sta
        # Range: 0.0 ~ 1.0  
        #
        # This can help to reduce left-right-left-right wheel concussion.
        #
        factor = (1.0 - math.sqrt(concussion_rate))
        out_sta *= factor 
        
        #
        # sta calibrate - area, if the area is small, the road is far. Unlock sta
        #
        # Usually 75% in normal road. If it's < 50%, take care.
        #
        if ri_area_percent < 50:
            factor = 250.0 / float(1 + ri_area_percent)
        elif ri_area_percent < 70:
            factor = 180.0 / float(1 + ri_area_percent)
        elif ri_area_percent < 75:
            factor = 120.0 / float(1 + ri_area_percent)
        else:
            factor = 80.0 / float(1 + ri_area_percent)
            
        out_sta *= factor
        
        #
        # Speed management
        #
        if ri_area_percent >= 72:
            # Wheel stable
            self.update_speed_abs(increase=True)
            if abs(self.dyn['ri_angle'] - 90) < 10 and abs(ri_cpoint_angle) < 10:
                # Possibly in strait road. Raise speed.
                self.update_speed_abs(increase=True)
        elif ri_area_percent >= 65:
            # Turn
            self.update_speed_abs(increase=False)
        elif ri_area_percent >= 50:
            # Turn
            self.set_speed(self.spec['speed_turn'])
        else:
            # Urgent turn
            self.set_speed(self.spec['speed_uturn'])
        
        # TRICKY: Fix road change speed by experience...too bad.
        if self.dyn['road_fixing'] == True:
            vanilla = out_sta
            out_sta = self.calibrate_sta_sqrt(self.calibrate_sta(out_sta))
            vbsmsg("...road fixing mode: " + format(vanilla) + " -> " + format(out_sta))
            self.set_speed(self.spec['speed_uturn'])
        
        return self.calibrate_sta(out_sta)

            
    def calc_sta(self, dashboard):
        """
        Calculate steering angle (sta). Depend on camera data.
        """
        sta_manual_ctrl = self.dyn['sta_manual_ctrl'] 
        if sta_manual_ctrl != 0.0:
            vbsmsg("sta manual ctrl: " + format(sta_manual_ctrl))
            self.dyn['sta_manual_ctrl'] = 0.0
            return sta_manual_ctrl
        
        if self.dyn['ri_cpoint'] == None:
            """
            Cannot find the road. Do something. plz
            """
            self.set_speed(self.spec['speed_back_limit'])
        
            return 0.0
        else:
            """
            Go forward
            """
            self.set_speed_if_negative(self.spec['speed_min'])
            expect_sta = round(self.calc_expect_sta3(dashboard), 4)
            if expect_sta > self.spec['sta_max']:
                vbsmsg("Invalid sta " + str(expect_sta))
                expect_sta = self.spec['sta_max']
            elif expect_sta < self.spec['sta_min']:
                vbsmsg("Invalid sta " + str(expect_sta))
                expect_sta = self.spec['sta_min']
            
            out_sta = expect_sta
            return out_sta
    
    def ______tho(self):
        pass
    
    def calc_tho_fixed_speed(self, dashboard, expect_speed=0.6, can_brake=False):
        """
        The goal of this is to return a tho which can keep the car in target speed.
        """
        latest_hist = self.history_get(0)
        latest_tho = latest_hist['tho']
        latest_brk = latest_hist['brk']
        
        # The latest_hist['speed'] is always positive.
        speed_diff = abs(expect_speed) - latest_hist['speed']
        
        if expect_speed > 0:
            """
            Want to go ahead. Use brake iff the speed diff is too high
            """
            if speed_diff > 0:
                """
                Too slow. Try tho
                """
                if latest_tho >= self.spec['tho_max']:
                    # Cannot add more tho
                    return (latest_tho, 0.0)
                else:
                    # Add some tho to improve speed
                    if speed_diff >= expect_speed / 2.0:
                        tho2add = self.spec['tho_unit'] * 2
                    else:
                        tho2add = self.spec['tho_unit']
                    tho = latest_tho + tho2add
                    return (tho, 0.0)
            elif speed_diff < 0:
                """
                Too fast. Try to decrease tho
                """
                if abs(speed_diff) >= (abs(expect_speed) / 2.0):
                    """
                    Urgent brake (ABS)
                    """
                    vbsmsg("ABS brake")
                    brk = self.spec['brk_min']
                    return (0.0, brk)
                
                tho = round((latest_tho * 3) / 4.0, 4)
                return (tho, 0.0)
            else:
                return (latest_tho, 0.0)
        elif expect_speed < 0:
            """
            Want to reverse. Use brake
            """
            if speed_diff > 0:
                """
                Too slow. Try more brk
                """
                if latest_brk >= self.spec['brk_max']:
                    # Cannot add more brake
                    return (0.0, latest_brk)
                else:
                    # Add some brk to improve speed
                    brk2add = self.spec['brk_unit']
                    brk = latest_brk + brk2add
                    return (0.0, brk)
            elif speed_diff < 0:
                """
                Too fast. Try to decrease brk
                """
                brk = round((latest_brk * 3) / 4.0, 4)
                return (0.0, brk)
            else:
                return (0.0, latest_brk)
        else:
            """
            Want to stop. Disable tho, the car will stop soon.
            """
            return (0.0, 0.0)
            
        return (0.0, 0.0)
        
    def calc_tho(self, dashboard):
        """
        Calculate tho value by expect speed. Recommend unit: 0.001
        
        Any tho like 0.0001 seems useless.
        """
        manual_ctrl = self.dyn['tho_manual_ctrl'] 
        if manual_ctrl != 0:
            self.dyn['tho_manual_ctrl'] = 0.0
            return manual_ctrl
        
        tho, brk = self.calc_tho_fixed_speed(dashboard, expect_speed=self.dyn['speed'])
        
        if brk > 0:
            return round(brk * (-1), 3)
        else:
            return round(tho, 3)
        
    def ______camera(self):
        pass
        
    def __camera_task_calc_cpoint_data(self):
        """
        Recalculate cpoint angle/distance by ri_cpoint
        
        Output: ri_cpoint_angle, ri_cpoint_distance
        """
        zero_point = self.hacjpg.get_resolution(self.dyn['ri_img'])
        zero_point = (zero_point[0] / 2, zero_point[1])
        
        if self.dyn['ri_cpoint'] == None:
            errmsg("Invalid cpoint input")
        
        cpoint_angle = 90 + self.hacjpg.calc_angle(zero_point, self.dyn['ri_cpoint'])
        self.dyn['ri_cpoint_angle'] = cpoint_angle
        if cpoint_angle >= 90 or cpoint_angle <= -90:
            errmsg("XXX")
            
        self.dyn['ri_cpoint_distance'] = self.hacjpg.calc_distance(zero_point, self.dyn['ri_cpoint'])
        
    def __camera_task_reindeer_goleft(self):
        img = self.dyn['ri_img']
        
        # Want to go left, but I am on right... so choose the red lane
        prefer_rgb_fixed = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]
        prefer_left = False
        for prefer_rgb in prefer_rgb_fixed:
            reindeer = self.hacjpg.reindeer4(img, rgb=prefer_rgb, prefer_left=prefer_left)
            prefer_left = True if prefer_left == False else False
            ri_cpoint, ri_angle, ri_ap_all = reindeer
            
            if ri_cpoint != None:
                print("Fix to left, select road: ", prefer_rgb, ", left: ", prefer_left)
                self.dyn['ri_cpoint'], self.dyn['ri_angle'], self.dyn['ri_area_percent_all'] = reindeer
                self.dyn['ri_area_percent'] = self.get_area_percent_by_color(self.dyn['ri_area_percent_all'], prefer_rgb)
                self.__camera_task_calc_cpoint_data()
                break
            else:
                msg("Cannot turn to left side")
        
    def __camera_task_reindeer_goright(self):
        img = self.dyn['ri_img']
        
        # Want to go right, but I am on left... so choose the green lane
        prefer_rgb_fixed = [(0, 255, 0), (255, 0, 0), (0, 0, 255)]
        prefer_left = True
        for prefer_rgb in prefer_rgb_fixed:
            reindeer = self.hacjpg.reindeer4(img, rgb=prefer_rgb, prefer_left=prefer_left)
            prefer_left = True if prefer_left == False else False
            ri_cpoint, ri_angle, ri_ap_all = reindeer
            
            if ri_cpoint != None:
                print("Fix to right, select road: ", prefer_rgb, ", left: ", prefer_left)
                self.dyn['ri_cpoint'], self.dyn['ri_angle'], self.dyn['ri_area_percent_all'] = reindeer
                self.dyn['ri_area_percent'] = self.get_area_percent_by_color(self.dyn['ri_area_percent_all'], prefer_rgb)
                self.__camera_task_calc_cpoint_data()
                break
            else:
                msg("Cannot turn to right side")
    
    def __camera_task_reindeer_aftercare(self):
        """
        If I get an proper reindeer result.
        - Try to locate I am on right, or left. Can get info by the coloer percentage. 
        - If I am not on the way, try to fix 
        """
        allap = self.dyn['ri_area_percent_all']
        
        if self.dyn['road_fixing'] == False:
            return
        
        if self.dyn['road_prefer_left'] == True:
            # I want to keep on left. If I am on left, red must > green
            if allap['red'] > (allap['green'] * 6) and allap['blue'] > allap['red']:
                self.dyn['road_fixing'] = False
                return # On the road, keep forward
            else:
                self.__camera_task_reindeer_goleft()
        else:
            # I want to keep on right. green > red
            if allap['green'] > (allap['red'] * 6) and allap['blue'] > allap['green']:
                self.dyn['road_fixing'] = False
                return # On the road, keep forward
            else:
                self.__camera_task_reindeer_goright()
    
    def camera_task_reindeer(self):
        """
        Process camera image. Identify my location, the direction, goal, etc.
        
        Output: None
        """
        latest_hist = self.history_get(0)
        
        img = copy.deepcopy(self.img)
        
        # Cut top half to remove useless data
        img = self.hacjpg.crosscut(img, 0.55, 1.0)
        
        # Reduce size to increase performance
        width, height = self.hacjpg.get_resolution(img)
        img = self.hacjpg.resize(img, width / 2, height / 2)
        
        # Normalize color to reduce the problem
        img = self.hacjpg.flatten2rgb(img)
        self.dyn['ri_img'] = img
        
        """
        Have two points. The angle of the line is.
        angle = 90 - np.rad2deg(np.arctan2(y[-1] - y[0], x[-1] - x[0]))
        
                    map_x, map_y
             | angle  /
             |      /
             | ?  /o <-- cpoint
             |  / 
        _____|/________
            zero point
        """
        self.dyn['ri_cpoint'] = None
        prefer_left = self.dyn['road_prefer_left']
        for prefer_rgb in self.dyn['road_prefer_rgb']:
            reindeer = self.hacjpg.reindeer4(img, rgb=prefer_rgb, prefer_left=prefer_left)
            prefer_left = True if prefer_left == False else False
            self.dyn['ri_cpoint'], self.dyn['ri_angle'], self.dyn['ri_area_percent_all'] = reindeer
            
            if self.dyn['ri_cpoint'] != None:
                self.dyn['ri_area_percent'] = self.get_area_percent_by_color(self.dyn['ri_area_percent_all'], prefer_rgb)
                self.__camera_task_calc_cpoint_data()
                break
            else:
                vbsmsg("reindeer lost: ", format(prefer_rgb))
                pass
                    
        if self.dyn['ri_cpoint'] != None:
            # Calculate the angle from zero point to cpoint, can imagine this is the wheel angle!
            self.__camera_task_reindeer_aftercare()
            if self.is_debug == True:
                img_dbg = copy.deepcopy(img)
                img_dbg = self.hacjpg.reindeer4_draw_stat(img_dbg, reindeer)
                self.hacjpg.show_nowait(img_dbg, name="reindeer")
        else:
            msg("CAUTION: lost")

        
    def gotoleft(self):
        self.dyn['road_fixing'] = True
        self.dyn['road_prefer_left'] = True
        
        # B -> R -> G
        self.dyn['road_prefer_rgb'] = [(0, 0, 255), (255, 0, 0), (0, 255, 0)]

    def gotoright(self):
        self.dyn['road_fixing'] = True
        self.dyn['road_prefer_left'] = False
        
        # B -> G -> R
        self.dyn['road_prefer_rgb'] = [(0, 0, 255), (0, 255, 0), (255, 0, 0)]
    
    def camera_task_follow_action(self, action):
        latest_position = self.history_get_latest_position()
        
        if latest_position == action:
            return
        
        if action == 'left':
            self.gotoleft()
        elif action == 'right':
            self.gotoright()
    
    def camera_task_traffic_sign(self):
        """
        Detect traffic sign
        """
        img = self.img
        top_output = self.hactsd.detect_traffic_sign(img)
        if top_output != None:
            top_output_name = top_output['name']
            action = self.traffic_sign[top_output_name]['action']
            vbsmsg(format(top_output), ", action: " + action)
            
            self.camera_task_follow_action(action)
        
    def camera_task_obstacle(self):
        """
        Detect wall or obstacle on road. Try to recover or fix.
        """
        allap = self.dyn['ri_area_percent_all']
        
        if self.dyn['road_obstacle'] == True:
            
            if allap['black'] > 20:
                self.dyn['tho_manual_ctrl'] = -0.15
            
            my_position = self.history_get_latest_position()
            
            if self.dyn['road_prefer_left'] == True:
                # Goto left
                if my_position == 'left':
                    self.dyn['road_obstacle'] = False
                else:
                    msg("Bee. Bee. Bee")
                    
                    if self.history_get_brake() > 0:
                        self.dyn['sta_manual_ctrl'] = 10
                    return
            else:
                # Goto right
                if my_position == 'right':
                    self.dyn['road_obstacle'] = False
                else:
                    msg("Bee. Bee. Bee")
                    if self.history_get_brake() > 0:
                        self.dyn['sta_manual_ctrl'] = -10
                    return
        
        if allap['black'] > 30 and self.history_get_speed() < 0.04:
            msg("Car in danger!!!")
            
            if allap['black'] > 80:
                msg("Sight is not clear... Try back.")
                self.dyn['tho_manual_ctrl'] = -0.2
                return                
            
            self.dyn['road_obstacle'] = True
            
            self.dyn['tho_manual_ctrl'] = -0.3
            
            if self.dyn['road_prefer_left'] == True:
                self.camera_task_follow_action('right')
                self.dyn['sta_manual_ctrl'] = -3
            else:
                self.camera_task_follow_action('left')
                self.dyn['sta_manual_ctrl'] = 3

    def camera_task_position(self):
        allap = self.dyn['ri_area_percent_all']
        if allap != None:
            if allap['red'] > (allap['green'] * 2):
                self.history_save_position('left')
            elif allap['green'] > (allap['red'] * 2):
                self.history_save_position('right')
            else:
                self.history_save_position('none')
        
    def camera_task(self, img, dashboard):
        self.img = img
        self.dashboard = dashboard
        
        #
        # Analyze road data. Find direction.
        #
        self.camera_task_reindeer()
        
        #
        # Identify my localtion
        #
        self.camera_task_position()
        
        #
        # Detect traffic sign
        #
        self.camera_task_traffic_sign()
        
        #
        # Detect obstacle
        #
        self.camera_task_obstacle()
        
    def try2drive(self, img, dashboard):
        """
        Input: {"status": "0", "throttle": "0.0200", "brakes": "0.0000",
               "speed": "0.4392", "steering_angle": "0.0000", "time": "1.380", "lap": "1"}
        Output: (sta, tho)
        """ 
        out_sta, out_tho = (0.0, 0.0)
        
        #
        # Save dashboard history
        #
        self.history_update(dashboard)
        
        #        
        # Process camera image. Identify my location, the direction, goal, etc.
        #
        st = time.time()
        self.camera_task(img, dashboard)
        ed = time.time()
        time_diff = round(ed - st, 3)
        if time_diff > 0.15:
            msg("long response time: ", format(round(ed - st, 3)))
        
        #
        # Calculate sta to maintain direction.
        #
        out_sta = self.calc_sta(dashboard)
        
        #
        # Calculate tho to maintain speed.
        #
        out_tho = self.calc_tho(dashboard)
        
#         vbsmsg("sta: " + format(out_sta) + ", tho: " + format(out_tho), ", speed: " + format(self.dyn['speed']))

        return out_sta, out_tho
    
